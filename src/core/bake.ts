import path from "path";
import fs from "fs";
import fg from "fast-glob";
import esbuild from "esbuild";
import { type BakeResult, type BakedTemplateIndexEntry } from "./types";

export async function bakeTemplates(params: {
  templatesDir: string;
  outDir: string;
}): Promise<BakeResult> {
  const { templatesDir } = params;
  const outDir = path.resolve(params.outDir);
  fs.mkdirSync(outDir, { recursive: true });

  const templateFiles = await fg(["**/*.ts", "**/*.tsx"], {
    cwd: templatesDir,
    absolute: true,
  });
  if (templateFiles.length === 0) {
    throw new Error(`No templates found in ${templatesDir}`);
  }
  const entries: BakedTemplateIndexEntry[] = [];
  const buildOutDir = path.join(outDir, "templates");
  fs.mkdirSync(buildOutDir, { recursive: true });

  await Promise.all(
    (templateFiles as string[]).map(async (absPath: string) => {
      const rel = path.relative(templatesDir, absPath);
      const id = path.basename(rel, path.extname(rel));
      const outfile = path.join(buildOutDir, `${id}.js`);
      await esbuild.build({
        entryPoints: [absPath],
        outfile,
        bundle: true,
        platform: "node",
        target: ["node20"],
        format: "cjs",
        sourcemap: false,
        logLevel: "silent",
      });
      entries.push({ id, path: `templates/${id}.js` });
    })
  );

  const indexFile = path.join(outDir, "templates.index.cjs");
  const lines = [
    "// Auto-generated by transflow bake",
    "module.exports = {",
    ...entries.map(
      (e) =>
        `  ${JSON.stringify(e.id)}: require('./${e.path.replace(/\\/g, "/")}'),`
    ),
    "};\n",
  ];
  fs.writeFileSync(indexFile, lines.join("\n"));

  // Copy Dockerfile asset into build context if present
  const dockerfileSrc = path.resolve(process.cwd(), "assets/Dockerfile");
  if (fs.existsSync(dockerfileSrc)) {
    fs.copyFileSync(dockerfileSrc, path.join(outDir, "Dockerfile"));
  }

  // Emit minimal package.json for runtime install
  const runtimePkg = {
    name: "transflow-lambda",
    private: true,
    version: "0.0.0",
    main: "dist/lambda/handler.js",
    dependencies: {
      "@aws-sdk/client-s3": "^3.645.0",
      "@aws-sdk/client-dynamodb": "^3.645.0",
      "@aws-sdk/lib-dynamodb": "^3.645.0",
      ioredis: "^5.4.1",
    },
  } as const;
  fs.writeFileSync(
    path.join(outDir, "package.json"),
    JSON.stringify(runtimePkg, null, 2)
  );

  // Compile handler into build context
  const handlerEntry = path.resolve(process.cwd(), "src/lambda/handler.ts");
  const handlerOut = path.join(outDir, "dist/lambda/handler.js");
  fs.mkdirSync(path.dirname(handlerOut), { recursive: true });
  await esbuild.build({
    entryPoints: [handlerEntry],
    outfile: handlerOut,
    bundle: true,
    platform: "node",
    target: ["node20"],
    format: "cjs",
    sourcemap: false,
    logLevel: "silent",
    external: ["ioredis", "@aws-sdk/*"],
  });

  return { outDir, entries, indexFile };
}
